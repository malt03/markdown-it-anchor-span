!function(e) {
    if ("object" == typeof exports && "undefined" != typeof module) module.exports = e(); else if ("function" == typeof define && define.amd) define([], e); else {
        ("undefined" != typeof window ? window : "undefined" != typeof global ? global : "undefined" != typeof self ? self : this).markdownitBr = e();
    }
}(function() {
    return function s(i, f, p) {
        function u(o, e) {
            if (!f[o]) {
                if (!i[o]) {
                    var r = "function" == typeof require && require;
                    if (!e && r) return r(o, !0);
                    if (a) return a(o, !0);
                    var n = new Error("Cannot find module '" + o + "'");
                    throw n.code = "MODULE_NOT_FOUND", n;
                }
                var t = f[o] = {
                    exports: {}
                };
                i[o][0].call(t.exports, function(e) {
                    var r = i[o][1][e];
                    return u(r || e);
                }, t, t.exports, s, i, f, p);
            }
            return f[o].exports;
        }
        for (var a = "function" == typeof require && require, e = 0; e < p.length; e++) u(p[e]);
        return u;
    }({
        1: [ function(e, r, o) {
            "use strict";
            function n(e, r) {
                var o, n, t, s = e.posMax, i = e.pos;
                if (123 !== e.src.charCodeAt(i) || 124 !== e.src.charCodeAt(i + 1)) return !1;
                if (r) return !1;
                if (s <= i + 4) return !1;
                for (e.pos = i + 2; e.pos < s - 1; ) {
                    if (125 === e.src.charCodeAt(e.pos) && 124 === e.src.charCodeAt(e.pos - 1)) {
                        o = !0;
                        break;
                    }
                    e.md.inline.skipToken(e);
                }
                return o ? (n = e.src.slice(i + 2, e.pos - 1)).match(/(^|[^\\])(\\\\)*\s/) ? (e.pos = i, 
                !1) : (e.posMax = e.pos, e.pos = i + 2, (t = e.push("anchor_span_open", "span", 1)).attrPush([ "id", n ]), 
                t.markup = "{|", (t = e.push("anchor_span_close", "span", -1)).markup = "|}", e.pos = e.posMax + 1, 
                e.posMax = s, !0) : (e.pos = i, !1);
            }
            r.exports = function(e) {
                e.inline.ruler.after("emphasis", "anchor_span", n);
            };
        }, {} ]
    }, {}, [ 1 ])(1);
});
